{"ast":null,"code":"var _jsxFileName = \"/home/null/projects/AuthX/web-demo/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get user data on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Set up axios interceptors for token handling\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n    const responseInterceptor = axios.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n\n      // If error is 401 (unauthorized) and not already retrying\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          // Try to get a new token using the refresh token\n          const refreshToken = localStorage.getItem('refreshToken');\n          if (!refreshToken) {\n            throw new Error('No refresh token available');\n          }\n          const res = await axios.post('/api/auth/refresh-token', {\n            refreshToken\n          });\n          if (res.data.token) {\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('refreshToken', res.data.refreshToken);\n\n            // Update auth header for the original request\n            originalRequest.headers.Authorization = `Bearer ${res.data.token}`;\n            return axios(originalRequest);\n          }\n        } catch (refreshError) {\n          // If refresh fails, log out the user\n          logout();\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n\n    // Clean up interceptors\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n  }, []);\n\n  // Fetch current user data\n  const fetchUserData = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/auth/me');\n      setCurrentUser(res.data.user);\n      setError(null);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch user data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register a new user\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      toast.success('Registration successful! Please login.');\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken);\n      await fetchUserData();\n      toast.success('Login successful!');\n      return res.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  };\n\n  // Request password reset\n  const forgotPassword = async email => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/forgot-password', {\n        email\n      });\n      setError(null);\n      toast.success('Password reset instructions sent to your email');\n      return res.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to process request';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password with token\n  const resetPassword = async (token, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/reset-password', {\n        token,\n        password\n      });\n      setError(null);\n      toast.success('Password reset successful! Please login with your new password.');\n      return res.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const errorMessage = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Password reset failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if user has a specific role\n  const hasRole = role => {\n    if (!currentUser || !currentUser.roles) {\n      return false;\n    }\n    return currentUser.roles.includes(role);\n  };\n\n  // Assign a role to a user (admin only)\n  const assignRole = async (userId, role) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/assign-role', {\n        userId,\n        role\n      });\n      setError(null);\n      toast.success(`Role '${role}' assigned successfully`);\n      return res.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      const errorMessage = ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Failed to assign role';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get all users (admin only)\n  const getAllUsers = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/users');\n      setError(null);\n      return res.data.users;\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      const errorMessage = ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || 'Failed to fetch users';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      error,\n      register,\n      login,\n      logout,\n      forgotPassword,\n      resetPassword,\n      hasRole,\n      assignRole,\n      getAllUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+YokMlL4BWgabmthchZCTsiHtfg=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","token","localStorage","getItem","fetchUserData","requestInterceptor","interceptors","request","use","config","headers","Authorization","Promise","reject","responseInterceptor","response","_error$response","originalRequest","status","_retry","refreshToken","Error","res","post","data","setItem","refreshError","logout","eject","get","user","err","_err$response","_err$response$data","message","removeItem","register","userData","success","_err$response2","_err$response2$data","errorMessage","login","email","password","_err$response3","_err$response3$data","info","forgotPassword","_err$response4","_err$response4$data","resetPassword","_err$response5","_err$response5$data","hasRole","role","roles","includes","assignRole","userId","_err$response6","_err$response6$data","getAllUsers","users","_err$response7","_err$response7$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/null/projects/AuthX/web-demo/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get user data on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Set up axios interceptors for token handling\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(\n      config => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      error => {\n        return Promise.reject(error);\n      }\n    );\n\n    const responseInterceptor = axios.interceptors.response.use(\n      response => response,\n      async error => {\n        const originalRequest = error.config;\n        \n        // If error is 401 (unauthorized) and not already retrying\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          try {\n            // Try to get a new token using the refresh token\n            const refreshToken = localStorage.getItem('refreshToken');\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            const res = await axios.post('/api/auth/refresh-token', { refreshToken });\n            \n            if (res.data.token) {\n              localStorage.setItem('token', res.data.token);\n              localStorage.setItem('refreshToken', res.data.refreshToken);\n              \n              // Update auth header for the original request\n              originalRequest.headers.Authorization = `Bearer ${res.data.token}`;\n              return axios(originalRequest);\n            }\n          } catch (refreshError) {\n            // If refresh fails, log out the user\n            logout();\n            return Promise.reject(refreshError);\n          }\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n\n    // Clean up interceptors\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n  }, []);\n\n  // Fetch current user data\n  const fetchUserData = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/auth/me');\n      setCurrentUser(res.data.user);\n      setError(null);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to fetch user data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register a new user\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      toast.success('Registration successful! Please login.');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/login', { email, password });\n      \n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken);\n      \n      await fetchUserData();\n      toast.success('Login successful!');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  };\n\n  // Request password reset\n  const forgotPassword = async (email) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/forgot-password', { email });\n      setError(null);\n      toast.success('Password reset instructions sent to your email');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to process request';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password with token\n  const resetPassword = async (token, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/reset-password', { token, password });\n      setError(null);\n      toast.success('Password reset successful! Please login with your new password.');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Password reset failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if user has a specific role\n  const hasRole = (role) => {\n    if (!currentUser || !currentUser.roles) {\n      return false;\n    }\n    return currentUser.roles.includes(role);\n  };\n\n  // Assign a role to a user (admin only)\n  const assignRole = async (userId, role) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/assign-role', { userId, role });\n      setError(null);\n      toast.success(`Role '${role}' assigned successfully`);\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to assign role';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get all users (admin only)\n  const getAllUsers = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/users');\n      setError(null);\n      return res.data.users;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to fetch users';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        loading,\n        error,\n        register,\n        login,\n        logout,\n        forgotPassword,\n        resetPassword,\n        hasRole,\n        assignRole,\n        getAllUsers\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}