{"ast":null,"code":"var _jsxFileName = \"/home/null/projects/AuthX/web-demo/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Logout user - define this first to avoid temporal dead zone issues\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  }, []);\n\n  // Get user data on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch current user data\n  const fetchUserData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/auth/me');\n      setCurrentUser(res.data.user);\n      setError(null);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch user data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Set up axios interceptors for token handling\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n    const responseInterceptor = axios.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n\n      // If error is 401 (unauthorized) and not already retrying\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          // Try to get a new token using the refresh token\n          const refreshToken = localStorage.getItem('refreshToken');\n          if (!refreshToken) {\n            throw new Error('No refresh token available');\n          }\n          const res = await axios.post('/api/auth/refresh-token', {\n            refreshToken\n          });\n          if (res.data.token) {\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('refreshToken', res.data.refreshToken);\n\n            // Update auth header for the original request\n            originalRequest.headers.Authorization = `Bearer ${res.data.token}`;\n            return axios(originalRequest);\n          }\n        } catch (refreshError) {\n          // If refresh fails, log out the user\n          logout();\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n\n    // Clean up interceptors\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n  }, [logout]);\n\n  // Register a new user\n  const register = useCallback(async userData => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      toast.success('Registration successful! Please login.');\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Login user\n  const login = useCallback(async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken);\n      await fetchUserData();\n      toast.success('Login successful!');\n      return res.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchUserData]);\n\n  // Request password reset\n  const forgotPassword = useCallback(async email => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/forgot-password', {\n        email\n      });\n      setError(null);\n      toast.success('Password reset instructions sent to your email');\n      return res.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to process request';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Reset password with token\n  const resetPassword = useCallback(async (token, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/reset-password', {\n        token,\n        password\n      });\n      setError(null);\n      toast.success('Password reset successful! Please login with your new password.');\n      return res.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const errorMessage = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Password reset failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Check if user has a specific role\n  const hasRole = useCallback(role => {\n    if (!currentUser || !currentUser.roles) {\n      return false;\n    }\n    return currentUser.roles.includes(role);\n  }, [currentUser]);\n\n  // Assign a role to a user (admin only)\n  const assignRole = useCallback(async (userId, role) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/assign-role', {\n        userId,\n        role\n      });\n      setError(null);\n      toast.success(`Role '${role}' assigned successfully`);\n      return res.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      const errorMessage = ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Failed to assign role';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get all users (admin only)\n  const getAllUsers = useCallback(async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/users');\n      setError(null);\n      return res.data.users;\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      const errorMessage = ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || 'Failed to fetch users';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      error,\n      register,\n      login,\n      logout,\n      forgotPassword,\n      resetPassword,\n      hasRole,\n      assignRole,\n      getAllUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fsImBraY7n2JDJAqMZrsqk13BG0=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","logout","localStorage","removeItem","info","token","getItem","fetchUserData","res","get","data","user","err","_err$response","_err$response$data","response","message","requestInterceptor","interceptors","request","use","config","headers","Authorization","Promise","reject","responseInterceptor","_error$response","originalRequest","status","_retry","refreshToken","Error","post","setItem","refreshError","eject","register","userData","success","_err$response2","_err$response2$data","errorMessage","login","email","password","_err$response3","_err$response3$data","forgotPassword","_err$response4","_err$response4$data","resetPassword","_err$response5","_err$response5$data","hasRole","role","roles","includes","assignRole","userId","_err$response6","_err$response6$data","getAllUsers","users","_err$response7","_err$response7$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/null/projects/AuthX/web-demo/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Logout user - define this first to avoid temporal dead zone issues\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  }, []);\n\n  // Get user data on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch current user data\n  const fetchUserData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/auth/me');\n      setCurrentUser(res.data.user);\n      setError(null);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to fetch user data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Set up axios interceptors for token handling\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(\n      config => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      error => {\n        return Promise.reject(error);\n      }\n    );\n\n    const responseInterceptor = axios.interceptors.response.use(\n      response => response,\n      async error => {\n        const originalRequest = error.config;\n        \n        // If error is 401 (unauthorized) and not already retrying\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          try {\n            // Try to get a new token using the refresh token\n            const refreshToken = localStorage.getItem('refreshToken');\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            const res = await axios.post('/api/auth/refresh-token', { refreshToken });\n            \n            if (res.data.token) {\n              localStorage.setItem('token', res.data.token);\n              localStorage.setItem('refreshToken', res.data.refreshToken);\n              \n              // Update auth header for the original request\n              originalRequest.headers.Authorization = `Bearer ${res.data.token}`;\n              return axios(originalRequest);\n            }\n          } catch (refreshError) {\n            // If refresh fails, log out the user\n            logout();\n            return Promise.reject(refreshError);\n          }\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n\n    // Clean up interceptors\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n  }, [logout]);\n\n  // Register a new user\n  const register = useCallback(async (userData) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/register', userData);\n      setError(null);\n      toast.success('Registration successful! Please login.');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Login user\n  const login = useCallback(async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/login', { email, password });\n      \n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken);\n      \n      await fetchUserData();\n      toast.success('Login successful!');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchUserData]);\n\n  // Request password reset\n  const forgotPassword = useCallback(async (email) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/forgot-password', { email });\n      setError(null);\n      toast.success('Password reset instructions sent to your email');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to process request';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Reset password with token\n  const resetPassword = useCallback(async (token, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/auth/reset-password', { token, password });\n      setError(null);\n      toast.success('Password reset successful! Please login with your new password.');\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Password reset failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Check if user has a specific role\n  const hasRole = useCallback((role) => {\n    if (!currentUser || !currentUser.roles) {\n      return false;\n    }\n    return currentUser.roles.includes(role);\n  }, [currentUser]);\n\n  // Assign a role to a user (admin only)\n  const assignRole = useCallback(async (userId, role) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/assign-role', { userId, role });\n      setError(null);\n      toast.success(`Role '${role}' assigned successfully`);\n      return res.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to assign role';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get all users (admin only)\n  const getAllUsers = useCallback(async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get('/api/users');\n      setError(null);\n      return res.data.users;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to fetch users';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        loading,\n        error,\n        register,\n        login,\n        logout,\n        forgotPassword,\n        resetPassword,\n        hasRole,\n        assignRole,\n        getAllUsers\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}